<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta http-equiv="x-ua-compatible" content="ie=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <!-- <link rel="stylesheet" href="//fonts.googleapis.com/icon?family=Material+Icons"> -->
  <!-- <link rel="stylesheet" href="//cdn.materialdesignicons.com/2.0.46/css/materialdesignicons.min.css"> -->
  <!-- Material Design icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/MaterialDesign-Webfont/2.5.94/css/materialdesignicons.min.css">
  <!-- style for Webex Teams Space Widget -->
  <link rel="stylesheet" href="https://code.s4d.io/widget-space/production/main.css">
  <!-- <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/material-design-iconic-font/2.2.0/css/material-design-iconic-font.min.css"> -->
  <title><%= htmlWebpackPlugin.options.title %></title>
  <!-- in development, connect to vue-devtools -->
  <% if (htmlWebpackPlugin.options.environment === 'development') { %>
  <script src="http://localhost:8098"></script>
  <% } %>
</head>
<body>
  <div id="app"></div>
</body>
<!-- eGain cobrowse lib -->
<script type="text/javascript">
var EG_ACT_ID="EG16529739"; (function(e,f){var d,c,b,a=e.createElement("iframe");a.src="about:blank";a.title="";a.id="egot_iframe";(a.frameElement||a).style.cssText="width:0;height:0;border:0;display:none;";b=e.getElementsByTagName("script");b=b[b.length-1];b.parentNode.insertBefore(a,b);try{c=a.contentWindow.document}catch(g){d=e.domain,a.src="javascript:var d=document.open();d.domain='"+d+"';void(0);",c=a.contentWindow.document}c.open()._d=function(){var a=this.createElement("script");d&&(this.domain=d);a.src=f;this.isEGFIF= !0;this.body.appendChild(a)};c.write('<body onload="document._d();">');c.close()})(document,"//cloud-us.analytics-egain.com/onetag/"+EG_ACT_ID);
</script>

<!-- CCOne chat js -->
<!-- <script type="text/javascript"  src="https://mm.ccone.net/chat-adapter/html/js/ThinConnectChatAPI4.js?1"></script> -->

<!-- Webex Connect / Engage chat client -->
<script>
  function initWebexConnectChat () {
    console.log('running window.initWebexConnectChat')
    var i = {
      t: function (t) {
        var e = "https://media.imi.chat/widget/js/imichatinit.js";
        try {
            var o = new XMLHttpRequest;
            o.onreadystatechange = function() {
              if (this.readyState == 4) {
                var t = document.getElementById("divicw");
                if (this.status == 0) {
                    i.o(t);
                    return
                }
                var e = document.createElement("script");
                e.innerHTML = this.responseText;
                t.parentNode.insertBefore(e, t.nextSibling)
              }
            };
            o.open("GET", e, true);
            o.send()
        } catch (s) {
            console.error(s)
        }
      },
      o: function (t) {
        t.insertAdjacentHTML("afterend", '<iframe id="tls_al_frm" frameborder="0" style="overflow: hidden;height: 208px;width: 394px;position: fixed;display: block;right: 48px;bottom: 12px;z-index: 99999; display:none;"></iframe>');
        var e = document.getElementById("tls_al_frm");
        var o = e.contentWindow || (e.contentDocument.document || e.contentDocument);
        o.document.open();
        o.document.write('<!doctype html><html><head><meta charset="utf-8"><title>Untitled Document</title><style>body{font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;color: #99a0b0;font-size: 14px;}.popover__content{background-color: #fbfbfe; padding: 1.5rem; border-radius: 5px; width: 300px; box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.26);position: relative;}.popover__message{font-weight: 600;color:#56627c;font-size: 16px;}.pull-left{float:left;}.clearfix{clear: both;}.hdr-txt{width: 218px; margin-top: 3px;}.para-txt a{text-decoration: none;color: #005cde;}.close-btn{position: absolute;right:15px;top:15px;}.close-btn a{text-decoration: none;font-weight: 400; color: #56627c; font-size: 16px;}</style></head><body><div class="popover__content"><div class="close-btn"><a href="#" onclick="closeTLSAlert();">X</a></div><div class="popover__message"><div class="pull-left hdr-txt">This browser version is not supported on LiveChat.</div></div><div class="clearfix"></div><p class="para-txt">Please update your browser to the latest version and re-open the website to access the widget. </p></div><script>function closeTLSAlert(){window.parent.postMessage({key: "close_tls_alert",value: "close_tls_alert",action: "close_tls_alert"}, "*");}</scr' + 'ipt></body></html>');
        o.document.close();
        e.style.display = "block";
        window.addEventListener("message", function(t) {
          if (t.data.action == "close_tls_alert") {
            i.s()
          }
        })
      },
      s: function () {
        var t = document.getElementById("tls_al_frm");
        t.remove()
      }
    }
    
    i.t(function(t) {});
  }
</script>
<!-- <script type="text/javascript"  src="https://mm.ccone.net/chat-adapter/html/js/ThinConnectChatAPI4.js?1"></script> -->

<!-- CJP Sandbox chat js -->
<script>
//Name of the Customer Support Template: CJP_Chat_meady
//Name of the Organization: meady.webexsandbox.co
  function initSparkCareChat (orgId, templateId) {
    var bubbleScript = document.createElement('script')
    e = document.getElementsByTagName('script')[0]
    bubbleScript.async = true
    bubbleScript.CiscoAppId =  'cisco-chat-bubble-app'
    bubbleScript.appPrefix = ''
    bubbleScript.DC = 'produs1.ciscoccservice.com'
    bubbleScript.orgId = orgId
    bubbleScript.templateId = templateId
    bubbleScript.src = 'https://bubble.produs1.ciscoccservice.com/bubble.js'
    bubbleScript.type = 'text/javascript'
    bubbleScript.setAttribute('charset', 'utf-8')
    e.parentNode.insertBefore(bubbleScript, e)
  }
</script>
<!-- <script type="text/javascript"  src="https://mm.ccone.net/chat-adapter/html/js/ThinConnectChatAPI4.js?1"></script> -->

<!-- new TSA CWCC Abilene chat js -->
<script>
  function initCwccTsaChat (orgId, templateId) {
    var bubbleScript = document.createElement('script')
    e = document.getElementsByTagName('script')[0]
    bubbleScript.async = true
    bubbleScript.CiscoAppId =  'cisco-chat-bubble-app'
    bubbleScript.appPrefix = 'bts'
    bubbleScript.DC = 'appstaging.ciscoccservice.com'
    bubbleScript.orgId = orgId || '83f66514-200c-47cd-8310-4a5711e7b356'
    bubbleScript.templateId = templateId || 'ce28a900-a8bc-11e9-9dce-53872d5a6b64'
    bubbleScript.src = 'https://btsbubble.appstaging.ciscoccservice.com/bubble.js'
    bubbleScript.type = 'text/javascript'
    bubbleScript.setAttribute('charset', 'utf-8')
    e.parentNode.insertBefore(bubbleScript, e)
  }
</script>
<!-- generic Webex Abilene chat js -->
<script>
  function initWebexChat (config) {
    console.log('window.initWebexChat:', config)
    var bubbleScript = document.createElement('script')
    e = document.getElementsByTagName('script')[0]
    bubbleScript.async = config.async
    bubbleScript.CiscoAppId = config.CiscoAppId
    bubbleScript.appPrefix = config.appPrefix || ''
    bubbleScript.DC = config.DC
    bubbleScript.orgId = config.orgId
    bubbleScript.templateId = config.templateId
    bubbleScript.src = 'https://' + bubbleScript.appPrefix + 'bubble.' + bubbleScript.DC + '/bubble.js'
    bubbleScript.type = 'text/javascript'
    bubbleScript.setAttribute('charset', 'utf-8')
    e.parentNode.insertBefore(bubbleScript, e)
  }
</script>

<!-- UCCX bubble chat -->
<script type="application/javascript">
// To detect if the chat is being launched on mobile device
function isMobile() {
  var userAgent = navigator.userAgent || navigator.vendor || window.opera;
  return /(android|bb\d+|meego).+mobile|bada\/|blackberry|iemobile|ip(hone|od)|lge |mobile.+firefox|opera m(ob|in)i|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(userAgent);
}

// UCCX bubble chat 12.5
function init125BubbleChat (smHost, widgetId) {
  // Modify this flag to false, To disable the chat download transcript option
  var enableTranscriptDownload = true;
  
  var msgWaitingForSecureConnectivity = 'Waiting for secure connectivity...';
  var msgCloseButtonLabel = 'Close';

  var appId = 'cisco_bubble_chat';
  var appClass = isMobile() ? 'mobile_bubble_chat' : 'desktop_bubble_chat';
  var appMargin = 15;
  var scheme = 'https://';
  var appUrl = scheme + smHost + '/ccp/ui/BubbleChat.html?host=' + smHost + '&wid=' + widgetId;
  var connectivityCheckUrlSecure = scheme + smHost + '/ccp/ui/ConnectivityCheck.html';
  var secureConnectivityCheckTimeout = 2000;
  var logPrefix = 'CISCO_BUBBLE_CHAT: ';
  var addNoCacheQueryParam;
  document.addEventListener("DOMContentLoaded", function () {
    window.ciscoBubbleChat.checkChatInProgress();
  });
  return {
    checkChatInProgress: function () {
      if (typeof (Storage) !== 'undefined') {
        if (sessionStorage.chatInProgress && JSON.parse(sessionStorage.chatInProgress)) {
          console.log(logPrefix + 'Chat conversation in progress detected. Trying to resume.');
          window.ciscoBubbleChat.showChatWindow();
        } else {
          console.log(logPrefix + 'There is no chat conversation in progress currently');
        }
      }
    },
    showChatWindow: function (injectedData) {
      var messageEventListener;
      if (document.getElementById(appId)) {
        console.log(logPrefix + 'Not loading BubbleChat as it is already loaded');
        return;
      }

      var validateInjectedData = function (formData) {					
        // browser compatible way to check whether it is an object with 10 fields and all the values are strings
        var result = true;
        if (formData && typeof formData === 'object' && formData.constructor === Object) {
          var counter = 0;
          for (var key in formData) {
            if (!(typeof formData[key] === 'string' || formData[key] instanceof String)) {
              result = false;
              break;
            }
            counter++;
            if (counter > 10) {
              result = false;
              break;
            }
          }
        } else {
          result = false;
        }
        return result;
      };
      
      if (injectedData) {
        if (validateInjectedData(injectedData.formData)) {
          appUrl += '&injectedFormData=' + encodeURIComponent(JSON.stringify(injectedData.formData));
        } else {
          if (typeof injectedData.validationErrorCallback === 'function') {
            injectedData.validationErrorCallback();
          } else {
            console.log(logPrefix + 'Could not invoke validationErrorCallback as it is not a function');
          }
        }
      }
      appUrl += '&enableTranscriptDownload=' + enableTranscriptDownload;

      var iframe = document.createElement('iframe');
      iframe.setAttribute('sandbox', 'allow-scripts allow-same-origin allow-forms allow-popups');
      iframe.setAttribute('id', appId);
      iframe.setAttribute('class', appClass);
      document.body.appendChild(iframe);
      var frameWindow = iframe.contentWindow ? iframe.contentWindow : iframe;
      var frameDoc = frameWindow.document;

      // Trigger a page load for iframe inline content loading to work in Firefox
      frameDoc.open();
      frameDoc.close();
      
      if(isMobile()) {
        frameDoc.body.style = 'margin:0;padding:0;';
      } else {
        frameDoc.body.style = 'margin:0;padding:4;box-sizing:border-box;';
      }
      
      frameDoc.body.innerHTML = '<div id="secure_connectivity_check_container" style="width: 100%; height: 100%;' +
          'font-family: Helvetica; font-size: 14px; color: #4F5051;text-align:center;' +
          'box-shadow: 0 0 3px #000; background: #fff; display: flex; flex-direction: column;justify-content:space-around;">' +
          '<div style="height:100%;display:flex;flex-direction:column">' +
            '<div style="height:50%;display:flex;align-items:center;">' +
              '<div style="width:100%;text-align:center;">' + msgWaitingForSecureConnectivity + '</div>' +
            '</div>' +
          '<div style="height:50%;display:flex;align-items:center;">' +
            '<a href="#" onclick="window.parent.postMessage({messageType: \'unmount\'}, \'*\'); return void(0);" style="width:100%;text-align:center;">' +
              msgCloseButtonLabel +
            '</a>' +
          '</div>' +
        '</div>';
      '</div>';

      if (!addNoCacheQueryParam) {
        addNoCacheQueryParam = function (url) {
          return url + (url.indexOf("?") === -1 ? '?' : '&') + 'nocache=' + new Date().getTime();
        }
      }

      if (!messageEventListener) {
        messageEventListener = function (event) {
          console.log(logPrefix + 'Received event from origin: ' + event.origin);
          console.log(logPrefix + 'Received event data: ' + JSON.stringify(event.data));
          switch (event.data.messageType) {
            case 'resize':
              var styleData = event.data.styles;
              if(typeof styleData === 'object' && Object.keys(styleData).length > 0) {
                var widgetStyles = '';
                for(var style in styleData) {
                  widgetStyles = widgetStyles + style + ':' + styleData[style] + ';';
                }
                document.getElementById(appId).style = widgetStyles;
              }
              break;
            case 'unmount':
              document.body.removeChild(document.getElementById(appId));
              window.removeEventListener('message', messageEventListener);
              console.log(logPrefix + 'Successfully unmounted BubbleChat and removed event listener for message');
              break;
            case 'bubblechat-cert-accepted':
              iframe.contentWindow.location.replace(addNoCacheQueryParam(appUrl));
              console.log(logPrefix + 'Successfully validated certificate acceptance and loaded BubbleChat');
              break;
            case 'set-chat-in-progress':
              if (typeof (Storage) !== 'undefined') {
                sessionStorage.chatInProgress = JSON.stringify(true);
                console.log(logPrefix + 'chatInProgress flag set in parent window');
              }
              break;
            case 'clear-chat-in-progress':
              if (typeof (Storage) !== 'undefined') {
                sessionStorage.removeItem("chatInProgress");
                console.log(logPrefix + 'chatInProgress flag cleared in parent window');
              }
              break;
            case 'minimize':
              document.getElementById(appId).classList.add('minimized_chat');
              break;
            case 'restore':
              document.getElementById(appId).classList.remove('minimized_chat');
              break;
            default:
              console.log(logPrefix + 'Unknown message type');
          }
        };
      }

      window.addEventListener('message', messageEventListener);
      console.log(logPrefix + 'Event listener for message added');

      var obtainSecureConnectivity = function () {
        window.open(addNoCacheQueryParam(connectivityCheckUrlSecure), 'SM_CERT_PAGE');
      };
      
      var xhrSecureConnectivityCheck = new XMLHttpRequest();
      xhrSecureConnectivityCheck.onreadystatechange = function () {
        if (this.readyState === 4) {
          console.log(logPrefix + 'Secure connectivity check status: ' + this.status);
          switch (this.status) {
            case 200:
              iframe.contentWindow.location.replace(addNoCacheQueryParam(appUrl));
              break;
            default:
              obtainSecureConnectivity();
          }
        }
      }
      console.log(logPrefix + 'Checking secure connectivity to: ' + connectivityCheckUrlSecure);
      xhrSecureConnectivityCheck.open('HEAD', addNoCacheQueryParam(connectivityCheckUrlSecure), true);
      xhrSecureConnectivityCheck.timeout = secureConnectivityCheckTimeout;
      xhrSecureConnectivityCheck.ontimeout = function () { console.log(logPrefix + 'Secure Connectivity check timed out'); }
      xhrSecureConnectivityCheck.send();
    }
  };
}

// UCCX bubble chat 12.0
function initBubbleChat (smHost, widgetId) {
  // var smHost = 'SM2-UCCX.dcloud.cisco.com';
  // var smHost = 'rtp-617532.tunnel.cc-dcloud.com';
  // var smHost = 'rtp-624435.tunnel.cc-dcloud.com';
  // var widgetId = '3';

  var msgMustAcceptCert = 'Certificate must be accepted to start the conversation.';
  var msgAcceptCertButtonLabel = 'Accept Certificate';
  var msgCloseButtonLabel = 'Close';
  var msgWaitingCertAcceptance = 'Waiting for certificate acceptance.';
  var msgConnectivityIssues = 'We are experiencing connectivity issues. Try later.';

  var appId = 'cisco_bubble_chat';
  var appMargin = 15;
  var appUrl = 'https://' + smHost + '/ccp/ui/BubbleChat.html?host=' + smHost + '&wid=' + widgetId;
  var connectivityCheckUrl = 'https://' + smHost + '/ccp/ui/ConnectivityCheck.html';
  var messageEventListener;
  var addNoCacheQueryParam;
  return {
    showChatWindow: function (injectedData) {
      var logPrefix = 'CISCO_BUBBLE_CHAT: ';
      if (document.getElementById(appId)) {
        console.log(logPrefix + 'Not loading BubbleChat as it is already loaded');
        return;
      }

      var validateInjectedData = function(formData) {
        // browser compatible way to check whether it is an object with 10 fields and all the values are strings
        var result = true;
        if (formData && typeof formData === 'object' && formData.constructor === Object){
          var counter = 0;
          for (var key in formData) {
            if (!(typeof formData[key] === 'string' || formData[key] instanceof String)) {
              result = false;
              break;
            }
            counter++;
            if (counter > 10) {
              result = false;
              break;
            }
          }
        } else {
          result = false;
        }
        return result;
      };

      if (injectedData) {
        if (validateInjectedData(injectedData.formData)) {
          appUrl += '&injectedFormData=' + encodeURIComponent(JSON.stringify(injectedData.formData));
        } else {
          if (typeof injectedData.validationErrorCallback === 'function') {
            injectedData.validationErrorCallback();
          } else {
            console.log(logPrefix + 'Could not invoke validationErrorCallback as it is not a function');
          }
        }
      }

      var iframe = document.createElement('iframe');
      iframe.setAttribute('sandbox', 'allow-scripts allow-same-origin allow-forms allow-popups');
      iframe.setAttribute('id', appId);
      iframe.setAttribute('style', 'position: fixed; width: 312px; height: 410px; border: none; bottom: 0px; right: 0; z-index:999;');
      document.body.appendChild(iframe);
      var frameWindow = iframe.contentWindow ? iframe.contentWindow : iframe;
      var frameDoc = frameWindow.document;

      // Trigger a page load for iframe inline content loading to work in Firefox
      frameDoc.open();
      frameDoc.close();

      frameDoc.body.innerHTML =     '<div id="secure-connectivity-check-container" style="position: fixed; width: 300px; height: 395px; ' +
      'bottom: 10px; right: 10px; font-family: Helvetica; font-size: 14px; color: #4F5051;' +
      'box-shadow: 0 0 3px #000; background: #fff; display: flex; flex-direction: column; display: none;">' +
      '<div style="height: 25%;"></div>' +
      '<div style="height: 25%; display: flex; align-items: flex-start; justify-content: center; text-align: center;">' +
      '<div style="padding: 0 15% 0 15%;">' +
      '<div id="secure-connectivity-check-msg"></div>' +
      '<a id="accept-cert-button" style="display:none; padding-top: 10px" href="#" onclick="acceptCertificate(); return void(0);">' +
      msgAcceptCertButtonLabel +
      '</a>' +
      '</div>' +
      '</div>' +
      '<div style="height: 25%; display: flex; align-items: flex-end; justify-content: center; text-align: center;">' +
      '<div style="padding: 0 15% 0 15%;">' +
      '<a href="#" onclick="window.parent.postMessage({messageType: \'unmount\'}, \'*\'); return void(0);">' +
      msgCloseButtonLabel +
      '</a>' +
      '</div>' +
      '</div>' +
      '<div style="height: 25%;"></div>' +
      '</div>';

      frameWindow.acceptCertificate = function () {
        frameDoc.getElementById('secure-connectivity-check-msg').innerHTML = msgWaitingCertAcceptance;
        frameDoc.getElementById('accept-cert-button').style.display = 'none';
        window.open(addNoCacheQueryParam(connectivityCheckUrl), 'SM_CERT_PAGE');
      };

      if (!addNoCacheQueryParam){
        addNoCacheQueryParam = function (url) {
          return url + (url.indexOf("?") === -1 ? '?' : '&') + 'nocache=' + new Date().getTime();
        }
      }

      if (!messageEventListener) {
        messageEventListener = function (event) {
          console.log(logPrefix + 'Received event from origin: ' + event.origin);
          console.log(logPrefix + 'Received event data: ' + JSON.stringify(event.data));
          switch (event.data.messageType) {
            case 'resize':
            document.getElementById(appId).style.height = event.data.height + appMargin + 'px';
            console.log(logPrefix + 'Successfully resized');
            break;
            case 'unmount':
            document.body.removeChild(document.getElementById(appId));
            window.removeEventListener('message', messageEventListener);
            console.log(logPrefix + 'Successfully unmounted BubbleChat and removed event listener for message');
            break;
            case 'bubblechat-cert-accepted':
            document.getElementById(appId).setAttribute('src', addNoCacheQueryParam(appUrl));
            console.log(logPrefix + 'Successfully validated certificate acceptance and loaded BubbleChat');
            break;
            default:
            console.log(logPrefix + 'Unknown message type');
          }
        };
      }

      window.addEventListener('message', messageEventListener);
      console.log(logPrefix + 'Event listener for message added');

      // Check HTTPS connectivity and show appropriate screen
      var showConnectivityIssue = function (message, showAcceptCertLink) {
        window.postMessage({ messageType: 'resize', height: 395 }, '*');
        frameDoc.getElementById('secure-connectivity-check-container').style.display = 'block';
        frameDoc.getElementById('secure-connectivity-check-msg').innerHTML = message;
        frameDoc.getElementById('accept-cert-button').style.display = showAcceptCertLink ? 'block' : 'none';
      };
      var xhr = new XMLHttpRequest();
      xhr.onreadystatechange = function () {
        if (this.readyState === 4) {
          console.log(logPrefix + 'Connectivity check status: ' + this.status);
          switch (this.status) {
            case 200:
            iframe.setAttribute('src', addNoCacheQueryParam(appUrl));
            break;
            case 0:
            showConnectivityIssue(msgMustAcceptCert, true);
            break;
            default:
            showConnectivityIssue(msgConnectivityIssues, false);
          }
        }
      };
      console.log(logPrefix + 'Checking connectivity to: ' + connectivityCheckUrl);
      xhr.open('GET', addNoCacheQueryParam(connectivityCheckUrl), true);
      xhr.send();
    }
  }
}
</script>

<!-- ECE docked chat -->
<script>
function initEceDockedChat (host) {
  return new Promise((resolve, reject) => {
    console.log('window.initEceDockedChat', host)
    const s = document.createElement('script')
    s.setAttribute('src', 'https://' + host + '/system/templates/chat/egain-chat.js')
    s.setAttribute('type', 'text/javascript')
    s.setAttribute('charset', 'utf-8')
    s.onload = function () {
      resolve()
    }
    s.onerror = function (e) {
      reject(e)
    }
    document.body.appendChild(s)
  })
}
</script>

<!-- Surfly cobrowse -->
<script>
// function to load surfly library
function loadSurfly (s, u, r, f, l, y) {
  s[f] = s[f] || {
    init: function (){ s[f].q = arguments }
  }
  l = u.createElement(r)
  y = u.getElementsByTagName(r)[0]
  l.async = 1
  l.src='https://surfly.com/surfly.js'
  y.parentNode.insertBefore(l,y)
}

// init surfly
function initSurfly (settings) {
  window.Surfly.init (settings, function (initResult) {
    if (initResult.success) {
      console.log("Surfly initialized.")
      // API calls can now be made!
      if (!Surfly.isInsideSession) {
        Surfly.button()
      }
    } else {
      console.log("Surfly was unable to initialize properly.")
    }
  })
}

// try to find widget key in local storage
const surflyKey = window.localStorage.getItem('surflyKey')
if (surflyKey) {
  console.log('surflyKey is set to', surflyKey, '. Loading Surfly...')
  // load surfly into DOM
  window.loadSurfly(window, document, 'script', 'Surfly')
  // now wait another bit to make sure it's done
  setTimeout(function () {
    // surfly settings
    const settings = {
      widget_key: surflyKey
    }
    // do init surfly. this will add the surfly cobrowse button to the DOM
    window.initSurfly(settings)
  }, 1200)
}
</script>

<!-- SFDC chat -->
<script>
function initSfdcChat (datacenter, sessionId) {
  console.log('window.initSfdcChat')
  const initESW = function () {
    embedded_svc.settings.displayHelpButton = true
    // Or false
    embedded_svc.settings.language = ''
    //For example, enter 'en' or 'en-US'

    //embedded_svc.settings.defaultMinimizedText = '...'; //(Defaults to Chat with an Expert)
    //embedded_svc.settings.disabledMinimizedText = '...'; //(Defaults to Agent Offline)

    //embedded_svc.settings.loadingText = ''; //(Defaults to Loading)
    //embedded_svc.settings.storageDomain = 'yourdomain.com'; //(Sets the domain for your deployment so that visitors can navigate subdomains during a chat session)

    // Settings for Chat
    //embedded_svc.settings.directToButtonRouting = function(prechatFormData) {
        // Dynamically changes the button ID based on what the visitor enters in the pre-chat form.
        // Returns a valid button ID.
    //};
    //embedded_svc.settings.prepopulatedPrechatFields = {}; //Sets the auto-population of pre-chat form fields
    //embedded_svc.settings.fallbackRouting = []; //An array of button IDs, user IDs, or userId_buttonId
    //embedded_svc.settings.offlineSupportMinimizedText = '...'; //(Defaults to Contact Us)

    embedded_svc.settings.enabledFeatures = ['LiveAgent']
    embedded_svc.settings.entryFeature = 'LiveAgent'

    embedded_svc.settings.extraPrechatFormDetails = [{
      value: sessionId,
      transcriptFields: ['dCloud_Instance_ID__c']
    },{
      value: datacenter,
      transcriptFields: ['dCloud_Instance_Zone__c']
    }]

    embedded_svc.init(
      'https://na115.salesforce.com',
      'https://dcloud-developer-edition.na115.force.com/',
      'https://service.force.com',
      '00D1N000001S9Vk',
      'Chat_Queue',
      {
        // baseLiveAgentContentURL: 'https://c.la4-c3-ph2.salesforceliveagent.com/content',
        baseLiveAgentContentURL: 'https://c.la4-c2-ia6.salesforceliveagent.com/content',
        deploymentId: '5723l000000Tblo',
        buttonId: '5733l000000Td9M',
        // baseLiveAgentURL: 'https://d.la4-c3-ph2.salesforceliveagent.com/chat',
        baseLiveAgentURL: 'https://d.la4-c2-ia6.salesforceliveagent.com/chat',
        eswLiveAgentDevName: 'Chat_Queue',
        isOfflineSupportEnabled: false
      }
    )
  }

  // load SFDC chat library
  const s = document.createElement('script')
  s.setAttribute('src', 'https://na115.salesforce.com/embeddedservice/5.0/esw.min.js')
  s.onload = function () {
    // init chat
    initESW()
  }
  document.body.appendChild(s)
}
</script>

<!-- Webex Teams Space Widget (chat/voice/video) -->
<script>
function initWebexTeamsWidget () {
  return new Promise((resolve, reject) => {
    const s = document.createElement('script')
    s.setAttribute('src', 'https://code.s4d.io/widget-space/production/bundle.js')
    s.onload = function () {
      resolve()
    }
    s.onerror = function (e) {
      reject(e)
    }
    document.body.appendChild(s)
  })
}
</script>

<!-- SFDC chat style -->
<style type='text/css'>
  .embeddedServiceHelpButton .helpButton .uiButton {
    background-color: #005DA9;
    font-family: "Arial", sans-serif;
  }
  .embeddedServiceHelpButton .helpButton .uiButton:focus {
    outline: 1px solid #005DA9;
  }
  /* fix SFDC chat style CSS conflict with buefy */
  .embeddedServiceHelpButton .message {
    background-color: initial;
  }
</style>

<!-- UCCX 12.5v2 bubble chat style -->
<!-- 
Modify only height and width attributes to resize the chat widget.
Modify position attributes (bottom, right) to change the widget positioning on the screen.
-->
<style>
  /*
    Styles will apply when device(view port) width is >768px
  */
  @media (min-device-width : 768px) {
    .desktop_bubble_chat {
      height: 410px;
      max-height: 410px;
      width: 312px;
      position: fixed;
      bottom: 1em;
      right: 1em;
      border: none;
      outline: none;
      box-sizing: border-box;
      z-index: 999;
      overflow: hidden;
      padding: 0;
    }
  }

  /*
    Styles will apply when device(view port) width is <=768px
  */
  @media (max-device-width: 768px) {
    .desktop_bubble_chat {
      height: 100%;
      max-height: 100%;
      width: 100%;
      position: fixed;
      bottom: 0;
      right: 0;
      border: none;
      outline: none;
      box-sizing: border-box;
      z-index: 999;
      overflow: hidden;
      padding: 0;
    }
  }

  /*
    Styles will apply when available width on window resize is >768px
  */
  @media (min-width : 768px) {
    .desktop_bubble_chat {
      height: 410px;
      max-height: 410px;
      width: 312px;
      position: fixed;
      bottom: 1em;
      right: 1em;
      border: none;
      outline: none;
      box-sizing: border-box;
      z-index: 999;
      overflow: hidden;
      padding: 0;
    }
  }

  /*
    Styles will apply when available width on window resize is <=768px
  */
  @media (max-width: 768px) {
    .desktop_bubble_chat {
      height: 100%;
      max-height: 100%;
      width: 100%;
      position: fixed;
      bottom: 0;
      right: 0;
      border: none;
      outline: none;
      box-sizing: border-box;
      z-index: 999;
      overflow: hidden;
      padding: 0;
    }
  }

  /*
    Styles will apply when isMobile function returns true
  */
  .mobile_bubble_chat {
    height: 100%;
    max-height: 100%;
    width: 100%;
    position: fixed;
    bottom: 0;
    right: 0;
    border: none;
    outline: none;
    box-sizing: border-box;
    z-index: 999;
    overflow: hidden;
    padding: 0;
  }

  /*
    Style will apply when chat is minimized
  */
  .minimized_chat {
    height: 56px;
  }
</style>
<!-- /UCCX 12.5v2 bubble chat style -->

</html>
